name: build-artifacts
on:
  push:
    branches:
      - main

jobs:
  non-conditional-step-to-make-this-valid:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Github actions need a step without any conditions"

  build_and_deploy:
    permissions: write-all
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'NO_DEPLOY')"
    environment:
      name: production
    defaults:
      run:
        working-directory: .
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_ENV: production
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Install dependencies
        run: npm install

      - name: Build website
        run: |
          chmod 755 ./build.sh
          ./build.sh --dist

      - uses: oprypin/find-latest-tag@v1
        if: "!contains(github.event.head_commit.message, 'VERSION_TAG=')"
        id: version
        with:
          repository: ${{ github.repository }}

      - name: Up the version (automatically)
        if: "!contains(github.event.head_commit.message, 'VERSION_TAG=')"
        run: |
          VERSION=$(echo "${{ steps.version.outputs.tag }}" | awk -F'.' '{ print $1"."$2"."$3+1 }')
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Fetch version from commit message
        if: "contains(github.event.head_commit.message, 'VERSION_TAG=')"
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -rn 's/.*VERSION_TAG=([0-9]+\.[0-9]+\.[0-9]+).*/\1/p')
          echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV 

      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.RELEASE_VERSION }}',
              sha: context.sha
            })

      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          artifacts: dist/*.zip

      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init
          terraform workspace select -or-create ${DEPLOYMENT_ENV}
          terraform get

      - name: Terraform Validate
        run: |
          cd ./terraform
          terraform validate     

      - name: Terraform Plan
        run: |
          cd ./terraform
          terraform plan \
            -var profile=pipeline \
            -var hosted_zone_id=${{ secrets.AWS_HOSTED_ZONE }} \
            -var cert_arn=${{secrets.AWS_CERT_ARN}}

      - name: Terraform Apply
        run: |
          cd ./terraform
          terraform apply -auto-approve -input=false \
            -var profile=pipeline \
            -var hosted_zone_id=${{ secrets.AWS_HOSTED_ZONE }} \
            -var cert_arn=${{secrets.AWS_CERT_ARN}}
